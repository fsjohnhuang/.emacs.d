* Pythone IDE

** Python Mode
~C-c ?~ ，打开Python Mode的帮助文档
~C-c >~ ，向右缩进
~C-c <~ ，向左缩进

** Pyenv
Python版本管理工具, 可对全局进行Python版本切换, 和单个项目提供对应的Python版本.

*** 安装使用
1) 安装
#+begin_src
# 从github下载
git clone https://github.com/yyuu/pyenv.git ~/.pyenv

# 添加环境变量
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
echo 'eval "$(pyenv init -)"' >> ~/.bash_profile

source ~/.bash_profile
#+end_src

2) 使用
#+begin_src
# 显示已安装的版本
# *前缀表示当前版本
# system表示系统内置的Python版本
pyenv versions

# 显示当前版本
pyenv version

# 显示可安装的版本
pyenv install --list

# 远程下载和安装某版本
pyenv install -v 2.7.13

# 本地安装
# 下载python源码包，放在~/.pyenv/cache/下
pyenv install 3.6.4

# 卸载
pyenv uninstall 2.7.13

# 切换到某版本
pyenv global 2.7.13

# 在当前目录下生成.python-version文件，那么下次进入时会自动切换到对应的虚拟环境中
pyenv local <env-name 或 some.version>
#+end_src
注意: 切换Python版本时会自动切换依赖库

*** pyenv-virtualenv
pyenv配合virtualenv使用，virtualenv用于隔离不同项目的工作环境

1) 安装
#+begin_src
git clone https://github.com/yyuu/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv

echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bash_profile
source ~/.bash_profile

pyenv help virtualenv
#+end_src

2) 使用
#+begin_src
# 创建项目,环境配置保存在~/.pyenv/versions/
pyenv virtualenv 2.7.13 firstproject

# 查看工作环境
pyenv virtualenvs

# 进入工作环境
pyenv active firstproject

# 退出工作环境
pyenv deactive firstproject

# 删除工作环境
pyenv virtualenv-delete firstproject
#+end_src
使用环境后，安装包时不要使用sudo，否则就会安装到全局范围了


*** QA
Q: 通过 pyenv 安装的 Python 在引用 sqlite3 时报不存在此包的异常
A: 由于 Python 引入 sqlite3 的路径与实际的不同，导致 sqlite3 缺失。通过以下步骤重新编译 Python
1) 从 sqlite3 官网获取源码 ~wget https://www.sqlite.org/2017/sqlite-autoconf-3170000.tar.gz --no-check-certificate~
2) 解压 ~tar zxvf sqlite-autoconf-3170000.tar.gz~
3) 进入并编译 sqlite3
#+begin_src shell
cd sqlite-autoconf-3170000
./configure --prefix=/usr/local/include/sqlite3
make
sudo make install
#+end_src
4) 进入 Python 源码目录
#+begin_src shell
cd ~/.pyenv/cache/Python-3.5.5
./configure --prefix=~/.pyenv/versions/3.5.5
make
make install
#+end_src

因为 ~/.pyenv/cache/Python-3.5.5/setup.py 中
#+begin_src
sqlite_inc_paths = ['/usr/include',
                    '/usr/include/sqlite',
                    '/usr/include/sqlite3',
                    '/usr/local/include,
                    '/usr/local/include/sqlite'
                    '/usr/local/include/sqlite3']
#+end_src
所以要将 sqlite3 编译到上述位置，那么在编译 Python 时才可以找到依赖。

** Elpy
官网：https://elpy.readthedocs.io/en/latest/index.html

rope，代码重构
flake8，语法静态检查
autopep8，检查PEP8风格
yapf，格式化代码

*** 安装配置
#+begin_src .emacs.d/init.el
(elpy-enable)
#+end_src
Elpy依赖一堆Python库，通过 ~M-x elpy-config RET~ 检查和安装依赖。

Emacs24下安装iPython7会出现提示符乱码的问题，解决方式：卸载后安装iPython6即可。

Flask下要关闭autopep8的功能，否则遵循pep8风格后会引起循环依赖的问题。
